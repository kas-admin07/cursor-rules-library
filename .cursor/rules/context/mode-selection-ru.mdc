---
description: "Применяется когда пользователь упоминает режим MVP против Production или спрашивает о подходе к разработке. Определяет нужны ли быстрые итерации (MVP) или надежная реализация (Production). Критично для установки правильных уровней валидации, тестирования и документирования."
globs: 
alwaysApply: false
---

# Выбор режима разработки

## Определение режима
Загружать это правило когда пользователь упоминает:
- "MVP", "быстро", "прототип", "демо"
- "продакшн", "production", "релиз", "деплой"
- "тестирование", "валидация", "безопасность"

## Правила режима MVP
- Минимальная обработка ошибок (базовые try/except)
- Пропустить комплексные тесты (только основной функционал)
- Базовое логирование (console.log/print операторы)
- Упрощенная валидация (только обязательные поля)
- Быстрый UI (функциональность важнее полировки)

## Правила режима Production
- Комплексная обработка ошибок с правильными HTTP кодами
- Полное покрытие тестами (unit + интеграционные)
- Структурированное логирование с уровнями
- Валидация входных данных + санитизация
- Заголовки безопасности, ограничение частоты запросов
- Документация кода

## Паттерн реализации
Подход MVP
@app.route('/api/users', methods=['POST'])
def create_user():
data = request.json
user = User(name=data['name'])
db.save(user)
return {'id': user.id}

Подход Production
@app.route('/api/users', methods=['POST'])
@rate_limit(5, per_minute=True)
def create_user():
try:
data = validate_user_data(request.json)
user = User(**data)
db.save(user)
logger.info(f"User created: {user.id}")
return {'id': user.id}, 201
except ValidationError as e:
logger.warning(f"Invalid user data: {e}")
return {'error': str(e)}, 400

<example>
Пользователь: "Нужно быстро сделать API для чата"
ИИ загружает режим MVP: базовые Flask маршруты, минимальная валидация
</example>

<example type="invalid">
Пользователь просит MVP, но ИИ предлагает комплексную настройку тестирования
</example>
