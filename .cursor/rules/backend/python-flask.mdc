---
description: "Apply when working with Python, Flask, FastAPI, or backend API files. Triggers on .py files and API-related discussions."
globs: *.py, app.py, main.py, api/**/*
alwaysApply: false
---

# Python Flask Standards

## Project Structure
backend/
├── app.py # Main Flask app
├── models/ # Database models
├── routes/ # API route handlers
├── utils/ # Helper functions
└── requirements.txt # Dependencies

## Flask Patterns
from flask import Flask, request, jsonify
from flask_pymongo import PyMongo

app = Flask(name)
app.config['MONGO_URI'] = 'mongodb://localhost:27017/mydb'
mongo = PyMongo(app)

@app.route('/api/users', methods=['POST'])
def create_user():
data = request.get_json()
user_id = mongo.db.users.insert_one(data).inserted_id
return jsonify({'id': str(user_id)}), 201


## Error Handling
- Use try/except for database operations
- Return proper HTTP status codes
- Log errors with context
- Validate input data

## Database Integration
- Use PyMongo for MongoDB
- Validate ObjectId format
- Handle connection errors
- Use connection pooling for production

## API Design
- RESTful endpoints
- Consistent response format
- Use HTTP methods correctly
- Include error messages in responses

<example>
Creating API endpoint:
• Define route with proper HTTP method
• Validate input data  
• Handle database errors
• Return consistent JSON response
</example>

<example type="invalid">
Missing error handling in database operations
Using GET for data modification
Inconsistent response formats
</example>
