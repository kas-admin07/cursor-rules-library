---
description: "Применяется при работе с Python, Flask, FastAPI или backend API файлами. Срабатывает на .py файлах и обсуждениях связанных с API."
globs: *.py, app.py, main.py, api/**/*
alwaysApply: false
---

# Стандарты Python Flask

## Структура проекта
backend/
├── app.py # Основное Flask приложение
├── models/ # Модели базы данных
├── routes/ # Обработчики API маршрутов
├── utils/ # Вспомогательные функции
└── requirements.txt # Зависимости

## Паттерны Flask
from flask import Flask, request, jsonify
from flask_pymongo import PyMongo

app = Flask(name)
app.config['MONGO_URI'] = 'mongodb://localhost:27017/mydb'
mongo = PyMongo(app)

@app.route('/api/users', methods=['POST'])
def create_user():
data = request.get_json()
user_id = mongo.db.users.insert_one(data).inserted_id
return jsonify({'id': str(user_id)}), 201

## Обработка ошибок
- Использовать try/except для операций с базой данных
- Возвращать правильные HTTP коды состояния
- Логировать ошибки с контекстом
- Валидировать входные данные

## Интеграция с базой данных
- Использовать PyMongo для MongoDB
- Валидировать формат ObjectId
- Обрабатывать ошибки подключения
- Использовать пул соединений для продакшна

## Дизайн API
- RESTful endpoints
- Согласованный формат ответов
- Правильно использовать HTTP методы
- Включать сообщения об ошибках в ответы

<example>
Создание API endpoint:
• Определить маршрут с правильным HTTP методом
• Валидировать входные данные  
• Обработать ошибки базы данных
• Вернуть согласованный JSON ответ
</example>

<example type="invalid">
Отсутствие обработки ошибок в операциях с базой данных
Использование GET для модификации данных
Несогласованные форматы ответов
</example>
